name: Deploy to GKE

on:
  push:
    branches:
      - main

jobs:
  deploy-gke:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Step 3: Set up Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: kubectl

      # Step 4: Configure kubectl to use the GKE cluster
      - name: Configure kubectl to use the GKE cluster
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }} --project ${{ secrets.GCP_PROJECT_ID }}

      # Step 5: Authenticate Docker to GCR
      - name: Authenticate Docker to GCR
        run: |
          gcloud auth configure-docker

      # Step 6: Add the Helm repo and Check if Helm release exists, then install or upgrade with custom values.yaml
      - name: Add Helm repo and Check if Helm release exists
        run: |
          set -e  # Stop script on error
          
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          
          # Check if the values.yaml file exists
          if [ ! -f helm/values.yaml ]; then
            echo "Error: helm/values.yaml file not found!"
            exit 1
          fi
          
          # Install or Upgrade NGINX Ingress
          if helm status nginx-ingress -n ingress-nginx; then
            echo "Upgrading existing nginx-ingress Helm release"
            helm upgrade nginx-ingress ingress-nginx/ingress-nginx --namespace ingress-nginx -f helm/values.yaml
          else
            echo "Installing new nginx-ingress Helm release"
            helm install nginx-ingress ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace -f helm/values.yaml
          fi

          # Validate the installation/upgrade and check the status of the release
          echo "Checking Helm release status"
          if ! helm status nginx-ingress -n ingress-nginx; then
            echo "Error: Helm release not found or failed to install/upgrade"
            exit 1
          fi
          
          # Optionally check if the ingress resource was created or updated
          echo "Validating ingress resource"
          if ! kubectl get ingress -n ingress-nginx; then
            echo "Error: Ingress resource not found!"
            exit 1
          fi
          
          echo "Helm release and ingress resource successfully updated"



      # Step 7: Get the Ingress URL (for later use in build)
      - name: Get Ingress URL
        run: |
          until [ ! -z "$INGRESS_IP" ]; do
            echo "Waiting for Ingress IP..."
            INGRESS_IP=$(kubectl get svc -n ingress-nginx nginx-ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            sleep 10
          done
          echo "INGRESS_IP=$INGRESS_IP"
          echo "INGRESS_URL=http://$INGRESS_IP" >> $GITHUB_ENV


      # Step 8: Build and Push Docker Images
      - name: Build and Push Docker Images
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
            --build-arg STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }} \
            --build-arg CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }} \
            --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --build-arg DATABASE_USER=${{ secrets.DATABASE_USER }} \
            --build-arg DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            --build-arg DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
            --build-arg NEXT_PUBLIC_API_URL="${{ env.INGRESS_URL }}/api" \
            --build-arg NEXT_PUBLIC_WEBAPP_URL="${{ env.INGRESS_URL }}" \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapp:${{ github.sha }} -f ./webapp/Dockerfile ./webapp

          docker build \
            --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
            --build-arg STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }} \
            --build-arg CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }} \
            --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --build-arg DATABASE_USER=${{ secrets.DATABASE_USER }} \
            --build-arg DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            --build-arg DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
            --build-arg NEXT_PUBLIC_API_URL="${{ env.INGRESS_URL }}/api" \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/api:${{ github.sha }} -f ./api/Dockerfile ./api
    
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapp:${{ github.sha }}
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/api:${{ github.sha }}

      # Step 9: Terraform Apply (Image-related Resources)
      - name: Terraform Apply
        working-directory: terraform
        env:
          TF_VAR_google_credentials: ${{ secrets.GCP_SA_KEY }}
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_clerk_publishable_key: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          TF_VAR_clerk_secret_key: ${{ secrets.CLERK_SECRET_KEY }}
          TF_VAR_clerk_sign_in_url: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}
          TF_VAR_clerk_sign_up_url: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}
          TF_VAR_clerk_webhook_secret: ${{ secrets.CLERK_WEBHOOK_SECRET }}
          TF_VAR_database_host: "database-service.default.svc.cluster.local"
          TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
          TF_VAR_next_public_api_url: ${{ env.INGRESS_URL }}/api"
          TF_VAR_next_public_webapp_url: ${{ env.INGRESS_URL }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_stripe_publishable_key: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          TF_VAR_stripe_secret_key: ${{ secrets.STRIPE_SECRET_KEY }}
        run: |
          terraform init -upgrade
          terraform apply -auto-approve

      - name: Cleanup old Docker images in GCR
        run: |
          # Get the current SHA
          SHA="${{ github.sha }}"
          PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          # List all tags in the webapp image and delete those that aren't 'latest' or the current SHA
          gcloud container images list-tags gcr.io/${PROJECT_ID}/webapp --format='get(digest)' --filter='NOT tags:(${SHA},latest)' | while read digest; do
            gcloud container images delete gcr.io/${PROJECT_ID}/webapp@$digest --quiet --force-delete-tags
          done
          # Repeat the process for the API image
          gcloud container images list-tags gcr.io/${PROJECT_ID}/api --format='get(digest)' --filter='NOT tags:(${SHA},latest)' | while read digest; do
            gcloud container images delete gcr.io/${PROJECT_ID}/api@$digest --quiet --force-delete-tags
          done