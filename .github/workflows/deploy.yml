name: Deploy to GKE

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: 'latest'
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Set up Docker to use the gcloud command-line tool as a credential helper
      run: |
        gcloud auth configure-docker

    - name: Build Docker image
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/tale-compendium:$GITHUB_SHA .

    - name: Push Docker image to GCR
      run: |
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/tale-compendium:$GITHUB_SHA

    - name: Deploy to GKE
      run: |
        gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }} --project ${{ secrets.GCP_PROJECT_ID }}
        kubectl apply -f k8s/

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init and Apply
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
        CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
        CLERK_WEBHOOK_SECRET: ${{ secrets.CLERK_WEBHOOK_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        DATABASE_USER: ${{ secrets.DATABASE_USER }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
      run: |
        terraform init
        terraform apply -auto-approve -var="google_credentials=${{ secrets.GCP_SA_KEY }}"

    - name: Cleanup old images
      run: |
        gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/tale-compendium --limit=5 --sort-by=TIMESTAMP --filter="NOT tags:*" --format='get(digest)' | while read digest; do gcloud container images delete gcr.io/${{ secrets.GCP_PROJECT_ID }}/tale-compendium@$digest --quiet; done
