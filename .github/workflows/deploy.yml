name: Deploy to GKE

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        install_components: kubectl

    - name: Set up Kubernetes Service Account
      run: |
        kubectl create serviceaccount terraform-deployer -n default || true
        kubectl create clusterrolebinding terraform-deployer-binding --clusterrole=cluster-admin --serviceaccount=default:terraform-deployer || true

    - name: Ensure Service Account Token Exists
      run: |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: terraform-deployer-token
          namespace: default
          annotations:
            kubernetes.io/service-account.name: terraform-deployer
        type: kubernetes.io/service-account-token
        EOF

    - name: Fetch Cluster Details
      id: cluster_info
      run: |
        CLUSTER_NAME=${{ secrets.GKE_CLUSTER_NAME }}
        REGION=${{ secrets.GKE_REGION }}
        PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}

        # Fetch Cluster Endpoint
        ENDPOINT=$(gcloud container clusters describe $CLUSTER_NAME --region $REGION --project $PROJECT_ID --format='value(endpoint)')

        # Fetch Cluster CA Certificate
        CA_CERT=$(gcloud container clusters describe $CLUSTER_NAME --region $REGION --project $PROJECT_ID --format='value(masterAuth.clusterCaCertificate)')

        # Fetch Kubernetes Access Token
        ACCESS_TOKEN=$(gcloud auth application-default print-access-token)

        echo "TF_VAR_k8s_cluster_endpoint=$ENDPOINT" >> $GITHUB_ENV
        echo "TF_VAR_k8s_cluster_ca_certificate=$CA_CERT" >> $GITHUB_ENV
        echo "TF_VAR_k8s_access_token=$ACCESS_TOKEN" >> $GITHUB_ENV

    - name: Set up Docker to use the gcloud command-line tool as a credential helper
      run: |
        gcloud auth configure-docker

    - name: Build Docker image for webapp
      run: |
        docker build \
          --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
          --build-arg NEXT_PUBLIC_CLERK_SIGN_IN_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }} \
          --build-arg NEXT_PUBLIC_CLERK_SIGN_UP_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }} \
          --build-arg STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
          --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }} \
          --build-arg CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }} \
          --build-arg CLERK_WEBHOOK_SECRET=${{ secrets.CLERK_WEBHOOK_SECRET }} \
          --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
          --build-arg DATABASE_USER=${{ secrets.DATABASE_USER }} \
          --build-arg DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
          --build-arg DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
          --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
          -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapp:$GITHUB_SHA \
          -f ./webapp/Dockerfile ./webapp

    - name: Build Docker image for api
      run: |
        docker build \
          -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/api:$GITHUB_SHA \
          -f ./api/Dockerfile ./api

    - name: Push Docker image to GCR for webapp
      run: |
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapp:$GITHUB_SHA

    - name: Push Docker image to GCR for api
      run: |
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/api:$GITHUB_SHA

    - name: Deploy to GKE
      run: |
        gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }} --project ${{ secrets.GCP_PROJECT_ID }}
        kubectl apply -f k8s/

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init and Apply
      working-directory: terraform
      env:
        TF_VAR_clerk_publishable_key: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
        TF_VAR_stripe_publishable_key: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
        TF_VAR_stripe_secret_key: ${{ secrets.STRIPE_SECRET_KEY }}
        TF_VAR_clerk_secret_key: ${{ secrets.CLERK_SECRET_KEY }}
        TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
        TF_VAR_database_user: ${{ secrets.DATABASE_USER }}
        TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
        TF_VAR_database_name: ${{ secrets.DATABASE_NAME }}
        TF_VAR_google_credentials: ${{ secrets.GCP_SA_KEY }}
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_region: ${{ secrets.GKE_REGION }}
        TF_VAR_cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
        TF_VAR_k8s_cluster_ca_certificate: ${{ env.TF_VAR_k8s_cluster_ca_certificate }}
        TF_VAR_k8s_cluster_endpoint: ${{ env.TF_VAR_k8s_cluster_endpoint }}
        TF_VAR_k8s_access_token: ${{ env.TF_VAR_k8s_access_token }}
      run: |
        terraform init
        terraform apply -auto-approve

    - name: Cleanup old images
      run: |
        gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/tale-compendium --limit=5 --sort-by=TIMESTAMP --filter="NOT tags:*" --format='get(digest)' | while read digest; do gcloud container images delete gcr.io/${{ secrets.GCP_PROJECT_ID }}/tale-compendium@$digest --quiet; done
