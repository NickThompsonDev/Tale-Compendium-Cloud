name: Deploy to GKE

on:
  push:
    branches:
      - main

jobs:
  deploy-gke:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Step 3: Set up Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: kubectl

      # Step 4: Configure kubectl to use the GKE cluster
      - name: Configure kubectl to use the GKE cluster
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }} --project ${{ secrets.GCP_PROJECT_ID }}

      # Step 5: Authenticate Docker to GCR
      - name: Authenticate Docker to GCR
        run: |
          gcloud auth configure-docker

      # Step 6: Check and Import Existing Resources
      - name: Import Existing Resources
        run: |
          # Import webapp-deployment if it exists
          kubectl get deployment webapp-deployment -n default && terraform import kubernetes_deployment.webapp default/webapp-deployment || echo "webapp-deployment does not exist, skipping import"

          # Import api-deployment if it exists
          kubectl get deployment api-deployment -n default && terraform import kubernetes_deployment.api default/api-deployment || echo "api-deployment does not exist, skipping import"

          # Import database-deployment if it exists
          kubectl get deployment database-deployment -n default && terraform import kubernetes_deployment.database default/database-deployment || echo "database-deployment does not exist, skipping import"

          # Import webapp-service if it exists
          kubectl get service webapp-service -n default && terraform import kubernetes_service.webapp default/webapp-service || echo "webapp-service does not exist, skipping import"

          # Import api-service if it exists
          kubectl get service api-service -n default && terraform import kubernetes_service.api default/api-service || echo "api-service does not exist, skipping import"

          # Import database-service if it exists
          kubectl get service database-service -n default && terraform import kubernetes_service.database default/database-service || echo "database-service does not exist, skipping import"

      # Step 7: Apply the custom Ingress resource
      - name: Apply custom Ingress resource
        run: |
          echo "Applying the webapp-api-ingress.yaml"
          kubectl apply -f k8s/webapp-api-ingress.yaml

      # Step 8: Build and Push Docker Images
      - name: Build and Push Docker Images
        run: |
          docker build \
            --no-cache \
            --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
            --build-arg STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }} \
            --build-arg CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }} \
            --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --build-arg DATABASE_USER=${{ secrets.DATABASE_USER }} \
            --build-arg DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            --build-arg DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
            --build-arg NEXT_PUBLIC_API_URL="https://cloud.talecompendium.com/api" \
            --build-arg NEXT_PUBLIC_WEBAPP_URL="https://cloud.talecompendium.com" \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapp:${{ github.sha }} \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapp:latest \
            -f ./webapp/Dockerfile ./webapp

          docker build \
            --no-cache \
            --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
            --build-arg STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }} \
            --build-arg CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }} \
            --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --build-arg DATABASE_USER=${{ secrets.DATABASE_USER }} \
            --build-arg DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            --build-arg DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
            --build-arg NEXT_PUBLIC_API_URL="https://cloud.talecompendium.com/api" \
            --build-arg NEXT_PUBLIC_WEBAPP_URL="https://cloud.talecompendium.com" \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/api:${{ github.sha }} \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/api:latest \
            -f ./api/Dockerfile ./api
    
          # Push both SHA and latest tags for the webapp image
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapp:${{ github.sha }}
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapp:latest

          # Push both SHA and latest tags for the API image
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/api:${{ github.sha }}
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/api:latest

      # Step 9: Terraform Apply (Image-related Resources)
      - name: Terraform Apply
        working-directory: terraform
        env:
          TF_VAR_google_credentials: ${{ secrets.GCP_SA_KEY }}
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_clerk_publishable_key: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          TF_VAR_clerk_secret_key: ${{ secrets.CLERK_SECRET_KEY }}
          TF_VAR_clerk_sign_in_url: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}
          TF_VAR_clerk_sign_up_url: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}
          TF_VAR_clerk_webhook_secret: ${{ secrets.CLERK_WEBHOOK_SECRET }}
          TF_VAR_database_host: "database-service.default.svc.cluster.local"
          TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
          TF_VAR_next_public_api_url: "https://cloud.talecompendium.com/api"
          TF_VAR_next_public_webapp_url: "https://cloud.talecompendium.com"
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_stripe_publishable_key: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          TF_VAR_stripe_secret_key: ${{ secrets.STRIPE_SECRET_KEY }}
        run: |
          terraform init -upgrade
          terraform apply -auto-approve
