name: Deploy to GKE

on:
  push:
    branches:
      - main

jobs:
  deploy-gke:
    runs-on: ubuntu-latest
    env:
      TF_VAR_google_credentials: ${{ secrets.GCP_SA_KEY }}
      TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_clerk_publishable_key: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      TF_VAR_clerk_secret_key: ${{ secrets.CLERK_SECRET_KEY }}
      TF_VAR_clerk_sign_in_url: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}
      TF_VAR_clerk_sign_up_url: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}
      TF_VAR_clerk_webhook_secret: ${{ secrets.CLERK_WEBHOOK_SECRET }}
      TF_VAR_database_host: "database-service.default.svc.cluster.local"
      TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
      TF_VAR_next_public_api_url: "https://talecompendiumcloud.com/api"
      TF_VAR_next_public_webapp_url: "https://talecompendiumcloud.com"
      TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
      TF_VAR_stripe_publishable_key: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
      TF_VAR_stripe_secret_key: ${{ secrets.STRIPE_SECRET_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: kubectl

      - name: Configure kubectl to use the GKE cluster
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }} --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate Docker to GCR
        run: |
          gcloud auth configure-docker

      - name: Build and Push API Docker Image
        run: |
          docker build \
            --no-cache \
            --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
            --build-arg STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }} \
            --build-arg CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }} \
            --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --build-arg DATABASE_USER=${{ secrets.DATABASE_USER }} \
            --build-arg DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            --build-arg DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
            --build-arg NEXT_PUBLIC_API_URL="https://talecompendiumcloud.com/api" \
            --build-arg NEXT_PUBLIC_WEBAPP_URL="https://talecompendiumcloud.com" \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/api:${{ github.sha }} \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/api:latest \
            -f ./api/Dockerfile ./api

          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/api:${{ github.sha }}
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/api:latest

      - name: Build and Push Webapp Docker Image
        run: |
          docker build \
            --no-cache \
            --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
            --build-arg STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }} \
            --build-arg CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }} \
            --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --build-arg DATABASE_USER=${{ secrets.DATABASE_USER }} \
            --build-arg DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            --build-arg DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
            --build-arg NEXT_PUBLIC_API_URL="https://talecompendiumcloud.com/api" \
            --build-arg NEXT_PUBLIC_WEBAPP_URL="https://talecompendiumcloud.com" \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapp:${{ github.sha }} \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapp:latest \
            -f ./webapp/Dockerfile ./webapp

          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapp:${{ github.sha }}
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapp:latest

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init -upgrade

      - name: Import existing resources
        working-directory: terraform
        run: |
          terraform import kubernetes_deployment.webapp default/webapp-deployment || echo "webapp-deployment does not exist, skipping import"
          terraform import kubernetes_deployment.api default/api-deployment || echo "api-deployment does not exist, skipping import"
          terraform import kubernetes_deployment.database default/database-deployment || echo "database-deployment does not exist, skipping import"
          terraform import kubernetes_service.webapp default/webapp-service || echo "webapp-service does not exist, skipping import"
          terraform import kubernetes_service.api default/api-service || echo "api-service does not exist, skipping import"
          terraform import kubernetes_service.database default/database-service || echo "database-service does not exist, skipping import"
          terraform import helm_release.cert_manager cert-manager/cert-manager || echo "cert-manager does not exist, skipping import"
          terraform import kubernetes_role_binding.cert_manager_leader_election cert-manager/cert-manager-leader-election || echo "cert-manager-leader-election does not exist, skipping import"
          terraform import kubernetes_manifest.letsencrypt_prod 'apiVersion=cert-manager.io/v1,kind=ClusterIssuer,name=letsencrypt-prod' || echo "letsencrypt-prod does not exist, skipping import"
          terraform import helm_release.nginx_ingress ingress-nginx/nginx-ingress || echo "nginx-ingress does not exist, skipping import"
          terraform import kubernetes_secret.gcs_sa_key default/gcs-sa-key || echo "gcs-sa-key does not exist, skipping import"
          terraform import kubernetes_manifest.webapp_ingress 'apiVersion=networking.k8s.io/v1,kind=Ingress,namespace=default,name=webapp-ingress' || echo "webapp-ingress does not exist, skipping import"
          terraform import google_storage_bucket.talecompendium_images talecompendium-images || echo "Bucket already managed, skipping import"
          terraform import google_service_account.api_service_account projects/nodal-clock-433208-b4/serviceAccounts/api-sa@nodal-clock-433208-b4.iam.gserviceaccount.com || echo "Service account already managed, skipping import"

      - name: Terraform Apply
        working-directory: terraform
        run: |
          # Attempt terraform apply
          terraform apply -auto-approve || { 
            echo "Deployment failed, selectively destroying newly created resources..."; 
            
            # If there's a log of imported resources, protect them from destruction
            if [ -f imported_resources.log ]; then
              echo "Removing imported resources from state to prevent destruction..."
              for resource in $(cat imported_resources.log); do
                terraform state rm $resource
              done
            fi
            
            # Destroy only the newly created resources
            terraform destroy -auto-approve;
            
            # Exit with error to signal the failure
            exit 1;  
          }

      - name: Cleanup old Docker images in GCR (for webapp)
        run: |
          PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          gcloud container images list-tags gcr.io/${PROJECT_ID}/webapp --format='get(digest)' --filter='NOT tags:(latest)' | while read digest; do
            gcloud container images delete gcr.io/${PROJECT_ID}/webapp@$digest --quiet --force-delete-tags
          done

      - name: Cleanup old Docker images in GCR (for api)
        run: |
          PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          gcloud container images list-tags gcr.io/${PROJECT_ID}/api --format='get(digest)' --filter='NOT tags:(latest)' | while read digest; do
            gcloud container images delete gcr.io/${PROJECT_ID}/api@$digest --quiet --force-delete-tags
          done
