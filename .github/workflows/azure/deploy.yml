name: Deploy to AKS with DevSecOps

# on:
#   push:
#     branches:
#       - main
#       - dev  # Trigger for both main and dev branches
#     paths:
#       - 'api/**'        # Only trigger API job when files in api/ directory change
#       - 'webapp/**'     # Only trigger Webapp job when files in webapp/ directory change
#       - 'terraform/**'  # Trigger Terraform job on any changes to terraform configurations
#       - '.github/workflows/**'  # Trigger on changes to deploy scripts in the workflows directory
#       - '/'             # Root-level changes

jobs:
  build-api:
    if: contains(github.event.head_commit.message, 'api') || github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure kubectl for AKS
        run: |
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Build and Push API Docker Image
        if: github.event_name == 'push' && contains(github.event.head_commit.message, 'api')
        run: |
          docker build \
            --no-cache \
            --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
            --build-arg STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }} \
            --build-arg CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }} \
            --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --build-arg DATABASE_USER=${{ secrets.DATABASE_USER }} \
            --build-arg DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            --build-arg DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
            --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            --build-arg NEXT_PUBLIC_WEBAPP_URL=${{ secrets.NEXT_PUBLIC_WEBAPP_URL }} \
            -t ${AZURE_ACR_NAME}.azurecr.io/api:${{ github.sha }} \
            -t ${AZURE_ACR_NAME}.azurecr.io/api:${{ env.IMAGE_TAG_LATEST }} \
            -f ./api/Dockerfile ./api

          docker push ${AZURE_ACR_NAME}.azurecr.io/api:${{ github.sha }}
          docker push ${AZURE_ACR_NAME}.azurecr.io/api:${{ env.IMAGE_TAG_LATEST }}

  build-webapp:
    if: contains(github.event.head_commit.message, 'webapp') || github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure kubectl for AKS
        run: |
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Build and Push Webapp Docker Image
        if: github.event_name == 'push' && contains(github.event.head_commit.message, 'webapp')
        run: |
          docker build \
            --no-cache \
            --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
            --build-arg STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }} \
            --build-arg CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }} \
            --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --build-arg DATABASE_USER=${{ secrets.DATABASE_USER }} \
            --build-arg DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            --build-arg DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
            --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            --build-arg NEXT_PUBLIC_WEBAPP_URL=${{ secrets.NEXT_PUBLIC_WEBAPP_URL }} \
            -t ${AZURE_ACR_NAME}.azurecr.io/webapp:${{ github.sha }} \
            -t ${AZURE_ACR_NAME}.azurecr.io/webapp:${{ env.IMAGE_TAG_LATEST }} \
            -f ./webapp/Dockerfile ./webapp

          docker push ${AZURE_ACR_NAME}.azurecr.io/webapp:${{ github.sha }}
          docker push ${AZURE_ACR_NAME}.azurecr.io/webapp:${{ env.IMAGE_TAG_LATEST }}

  deploy-terraform:
    if: contains(github.event.head_commit.message, 'terraform') || contains(github.event.head_commit.message, 'deploy') || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Authenticate Azure CLI
      - name: Log in to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Terraform Init
      - name: Terraform Init
        working-directory: terraform/${{ env.NAMESPACE }}
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_clerk_publishable_key: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          TF_VAR_clerk_secret_key: ${{ secrets.CLERK_SECRET_KEY }}
          TF_VAR_clerk_sign_in_url: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}
          TF_VAR_clerk_sign_up_url: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}
          TF_VAR_clerk_webhook_secret: ${{ secrets.CLERK_WEBHOOK_SECRET }}
          TF_VAR_database_host: "database-service.default.svc.cluster.local"
          TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_stripe_publishable_key: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          TF_VAR_stripe_secret_key: ${{ secrets.STRIPE_SECRET_KEY }}
          TF_VAR_next_public_api_url: "https://talecompendiumcloud.com/api"
          TF_VAR_next_public_webapp_url: "https://talecompendiumcloud.com"
        run: terraform init -upgrade

      # Terraform Apply
      - name: Terraform Apply
        working-directory: terraform/${{ env.NAMESPACE }}
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_clerk_publishable_key: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          TF_VAR_clerk_secret_key: ${{ secrets.CLERK_SECRET_KEY }}
          TF_VAR_clerk_sign_in_url: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}
          TF_VAR_clerk_sign_up_url: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}
          TF_VAR_clerk_webhook_secret: ${{ secrets.CLERK_WEBHOOK_SECRET }}
          TF_VAR_database_host: "database-service.default.svc.cluster.local"
          TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_stripe_publishable_key: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          TF_VAR_stripe_secret_key: ${{ secrets.STRIPE_SECRET_KEY }}
          TF_VAR_next_public_api_url: "https://talecompendiumcloud.com/api"
          TF_VAR_next_public_webapp_url: "https://talecompendiumcloud.com"
        run: terraform apply -auto-approve
