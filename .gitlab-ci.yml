stages:
  - pre-security-scan
  - build
  - test
  - post-build-security-scan
  - deploy
  - post-deploy-security-scan
  - cleanup

variables:
  GOOGLE_PROJECT_ID: "nodal-clock-433208-b4"
  GOOGLE_REGION: "us-east1"
  GOOGLE_ZONE: "us-east1-a"
  TF_VAR_database_host: "database-service.default.svc.cluster.local"
  TF_VAR_database_password: $DATABASE_PASSWORD
  TF_VAR_openai_api_key: $OPENAI_API_KEY
  TF_VAR_stripe_publishable_key: $NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
  TF_VAR_stripe_secret_key: $STRIPE_SECRET_KEY
  TF_VAR_clerk_publishable_key: $NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY
  TF_VAR_clerk_secret_key: $CLERK_SECRET_KEY
  TF_VAR_clerk_sign_in_url: $NEXT_PUBLIC_CLERK_SIGN_IN_URL
  TF_VAR_clerk_sign_up_url: $NEXT_PUBLIC_CLERK_SIGN_UP_URL
  TF_VAR_clerk_webhook_secret: $CLERK_WEBHOOK_SECRET

before_script:
  - apt-get update && apt-get install -y curl unzip
  - curl -o terraform.zip https://releases.hashicorp.com/terraform/1.5.2/terraform_1.5.2_linux_amd64.zip
  - unzip terraform.zip
  - mv terraform /usr/local/bin/terraform
  - docker login -u _json_key -p "$GCP_SERVICE_ACCOUNT_KEY" https://gcr.io

# Job for the dev branch (build, test, deploy to dev)
build_dev:
  stage: build
  only:
    - dev
  script:
    - echo "Building Docker images for dev environment"
    - docker build \
        --no-cache \
        --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY \
        --build-arg STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY \
        --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=$NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY \
        --build-arg CLERK_SECRET_KEY=$CLERK_SECRET_KEY \
        --build-arg OPENAI_API_KEY=$OPENAI_API_KEY \
        --build-arg DATABASE_USER=$DATABASE_USER \
        --build-arg DATABASE_PASSWORD=$DATABASE_PASSWORD \
        --build-arg DATABASE_NAME=$DATABASE_NAME \
        --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL_DEV \
        --build-arg NEXT_PUBLIC_WEBAPP_URL=$NEXT_PUBLIC_WEBAPP_URL_DEV \
        -t gcr.io/$GOOGLE_PROJECT_ID/api-dev:${CI_COMMIT_SHORT_SHA} \
        -t gcr.io/$GOOGLE_PROJECT_ID/api-dev:latest \
        -f ./api/Dockerfile ./api

    - docker build \
        --no-cache \
        --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY \
        --build-arg STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY \
        --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=$NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY \
        --build-arg CLERK_SECRET_KEY=$CLERK_SECRET_KEY \
        --build-arg OPENAI_API_KEY=$OPENAI_API_KEY \
        --build-arg DATABASE_USER=$DATABASE_USER \
        --build-arg DATABASE_PASSWORD=$DATABASE_PASSWORD \
        --build-arg DATABASE_NAME=$DATABASE_NAME \
        --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL_DEV \
        --build-arg NEXT_PUBLIC_WEBAPP_URL=$NEXT_PUBLIC_WEBAPP_URL_DEV \
        -t gcr.io/$GOOGLE_PROJECT_ID/webapp-dev:${CI_COMMIT_SHORT_SHA} \
        -t gcr.io/$GOOGLE_PROJECT_ID/webapp-dev:latest \
        -f ./webapp/Dockerfile ./webapp

    # Push images to GCR
    - docker push gcr.io/$GOOGLE_PROJECT_ID/api-dev:${CI_COMMIT_SHORT_SHA}
    - docker push gcr.io/$GOOGLE_PROJECT_ID/api-dev:latest
    - docker push gcr.io/$GOOGLE_PROJECT_ID/webapp-dev:${CI_COMMIT_SHORT_SHA}
    - docker push gcr.io/$GOOGLE_PROJECT_ID/webapp-dev:latest

test_dev:
  stage: test
  only:
    - dev
  script:
    - echo "Running tests for dev"
    # Add testing logic here (unit tests, integration tests, etc.)
    - echo "Tests Passed"

security_scan_dev:
  stage: post-build-security-scan
  only:
    - dev
  script:
    - echo "Running security scans on the dev environment"
    # Placeholder for future DevSecOps implementation (e.g., SAST, DAST, etc.)
    - echo "Security Scans Completed"

deploy_dev:
  stage: deploy
  only:
    - dev
  script:
    - echo "Deploying full environment to dev"
    - cd terraform/dev  # This is where we reference the dev-specific directory
    - terraform init
    - terraform apply -auto-approve -var environment=dev || { 
        echo "Deployment failed, attempting to destroy resources..."; 
        terraform destroy -auto-approve -target='!kubernetes_deployment.database';
        exit 1; 
      }
  environment:
    name: dev
    url: https://dev.talecompendiumcloud.com
  variables:
    GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

# Job to run on the main branch (build, test, deploy to main)
build_main:
  stage: build
  only:
    - main
  script:
    - echo "Building Docker images for main environment"
    - docker build \
        --no-cache \
        --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY \
        --build-arg STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY \
        --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=$NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY \
        --build-arg CLERK_SECRET_KEY=$CLERK_SECRET_KEY \
        --build-arg OPENAI_API_KEY=$OPENAI_API_KEY \
        --build-arg DATABASE_USER=$DATABASE_USER \
        --build-arg DATABASE_PASSWORD=$DATABASE_PASSWORD \
        --build-arg DATABASE_NAME=$DATABASE_NAME \
        --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL_MAIN \
        --build-arg NEXT_PUBLIC_WEBAPP_URL=$NEXT_PUBLIC_WEBAPP_URL_MAIN \
        -t gcr.io/$GOOGLE_PROJECT_ID/api-main:${CI_COMMIT_SHORT_SHA} \
        -t gcr.io/$GOOGLE_PROJECT_ID/api-main:latest \
        -f ./api/Dockerfile ./api

    - docker build \
        --no-cache \
        --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY \
        --build-arg STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY \
        --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=$NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY \
        --build-arg CLERK_SECRET_KEY=$CLERK_SECRET_KEY \
        --build-arg OPENAI_API_KEY=$OPENAI_API_KEY \
        --build-arg DATABASE_USER=$DATABASE_USER \
        --build-arg DATABASE_PASSWORD=$DATABASE_PASSWORD \
        --build-arg DATABASE_NAME=$DATABASE_NAME \
        --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL_MAIN \
        --build-arg NEXT_PUBLIC_WEBAPP_URL=$NEXT_PUBLIC_WEBAPP_URL_MAIN \
        -t gcr.io/$GOOGLE_PROJECT_ID/webapp-main:${CI_COMMIT_SHORT_SHA} \
        -t gcr.io/$GOOGLE_PROJECT_ID/webapp-main:latest \
        -f ./webapp/Dockerfile ./webapp

    # Push images to GCR
    - docker push gcr.io/$GOOGLE_PROJECT_ID/api-main:${CI_COMMIT_SHORT_SHA}
    - docker push gcr.io/$GOOGLE_PROJECT_ID/api-main:latest
    - docker push gcr.io/$GOOGLE_PROJECT_ID/webapp-main:${CI_COMMIT_SHORT_SHA}
    - docker push gcr.io/$GOOGLE_PROJECT_ID/webapp-main:latest

deploy_main:
  stage: deploy
  only:
    - main
  script:
    - echo "Deploying infrastructure to main"
    - cd terraform/main
    - terraform init -input=false
    - terraform apply -auto-approve -var environment=main || { 
        echo "Deployment failed, attempting to destroy resources..."; 
        terraform destroy -auto-approve -target='!kubernetes_deployment.database';
        exit 1; 
      }
  environment:
    name: main
    url: https://talecompendiumcloud.com
  variables:
    GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

cleanup_dev:
  stage: cleanup
  only:
    - dev
  script:
    - echo "Cleaning up old Docker images for dev"
    - gcloud container images list-tags gcr.io/$GOOGLE_PROJECT_ID/webapp-dev --format='get(digest)' --filter='NOT tags:(latest)' | while read digest; do
        gcloud container images delete gcr.io/$GOOGLE_PROJECT_ID/webapp-dev@$digest --quiet --force-delete-tags;
      done
    - gcloud container images list-tags gcr.io/$GOOGLE_PROJECT_ID/api-dev --format='get(digest)' --filter='NOT tags:(latest)' | while read digest; do
        gcloud container images delete gcr.io/$GOOGLE_PROJECT_ID/api-dev@$digest --quiet --force-delete-tags;
      done

cleanup_main:
  stage: cleanup
  only:
    - main
  script:
    - echo "Cleaning up old Docker images for main"
    - gcloud container images list-tags gcr.io/$GOOGLE_PROJECT_ID/webapp-main --format='get(digest)' --filter='NOT tags:(latest)' | while read digest; do
        gcloud container images delete gcr.io/$GOOGLE_PROJECT_ID/webapp-main@$digest --quiet --force-delete-tags;
      done
    - gcloud container images list-tags gcr.io/$GOOGLE_PROJECT_ID/api-main --format='get(digest)' --filter='NOT tags:(latest)' | while read digest; do
        gcloud container images delete gcr.io/$GOOGLE_PROJECT_ID/api-main@$digest --quiet --force-delete-tags;
      done
