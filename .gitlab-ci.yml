stages:
  - pre-security-scan
  - build
  - test
  - post-build-security-scan
  - deploy
  - post-deploy-security-scan
  - cleanup

image: google/cloud-sdk:latest

# Variables to be used for both dev and main environments
variables:
  GOOGLE_PROJECT_ID: "nodal-clock-433208-b4"
  GOOGLE_REGION: "us-east1"
  GOOGLE_ZONE: "us-east1-a"
  TF_VAR_database_host: "database-service.default.svc.cluster.local"
  TF_VAR_database_password: $DATABASE_PASSWORD
  TF_VAR_openai_api_key: $OPENAI_API_KEY
  TF_VAR_stripe_publishable_key: $NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
  TF_VAR_stripe_secret_key: $STRIPE_SECRET_KEY
  TF_VAR_clerk_publishable_key: $NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY
  TF_VAR_clerk_secret_key: $CLERK_SECRET_KEY
  TF_VAR_clerk_sign_in_url: $NEXT_PUBLIC_CLERK_SIGN_IN_URL
  TF_VAR_clerk_sign_up_url: $NEXT_PUBLIC_CLERK_SIGN_UP_URL
  TF_VAR_clerk_webhook_secret: $CLERK_WEBHOOK_SECRET

before_script:
  - apt-get update && apt-get install -y jq
  # Authenticate to Google Cloud using the service account key from GitLab
  - echo "$GCP_SERVICE_ACCOUNT_KEY" | jq -r '.private_key_data' > ${CI_PROJECT_DIR}/gcp-key.json
  - gcloud auth activate-service-account --key-file=${CI_PROJECT_DIR}/gcp-key.json
  - gcloud config set project $GOOGLE_PROJECT_ID
  # Docker login to Google Container Registry
  - gcloud auth configure-docker

# Shared template for building Docker images
.build_template:
  script:
    - echo "Building Docker images for $CI_ENVIRONMENT_NAME environment"
    - docker build \
        --no-cache \
        --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY \
        --build-arg STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY \
        --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=$NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY \
        --build-arg CLERK_SECRET_KEY=$CLERK_SECRET_KEY \
        --build-arg OPENAI_API_KEY=$OPENAI_API_KEY \
        --build-arg DATABASE_USER=$DATABASE_USER \
        --build-arg DATABASE_PASSWORD=$DATABASE_PASSWORD \
        --build-arg DATABASE_NAME=$DATABASE_NAME \
        --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
        --build-arg NEXT_PUBLIC_WEBAPP_URL=$NEXT_PUBLIC_WEBAPP_URL \
        -t gcr.io/$GOOGLE_PROJECT_ID/api-$CI_ENVIRONMENT_NAME:${CI_COMMIT_SHORT_SHA} \
        -t gcr.io/$GOOGLE_PROJECT_ID/api-$CI_ENVIRONMENT_NAME:latest \
        -f ./api/Dockerfile ./api

    - docker build \
        --no-cache \
        --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY \
        --build-arg STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY \
        --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=$NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY \
        --build-arg CLERK_SECRET_KEY=$CLERK_SECRET_KEY \
        --build-arg OPENAI_API_KEY=$OPENAI_API_KEY \
        --build-arg DATABASE_USER=$DATABASE_USER \
        --build-arg DATABASE_PASSWORD=$DATABASE_PASSWORD \
        --build-arg DATABASE_NAME=$DATABASE_NAME \
        --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
        --build-arg NEXT_PUBLIC_WEBAPP_URL=$NEXT_PUBLIC_WEBAPP_URL \
        -t gcr.io/$GOOGLE_PROJECT_ID/webapp-$CI_ENVIRONMENT_NAME:${CI_COMMIT_SHORT_SHA} \
        -t gcr.io/$GOOGLE_PROJECT_ID/webapp-$CI_ENVIRONMENT_NAME:latest \
        -f ./webapp/Dockerfile ./webapp

    # Push images to GCR
    - docker push gcr.io/$GOOGLE_PROJECT_ID/api-$CI_ENVIRONMENT_NAME:${CI_COMMIT_SHORT_SHA}
    - docker push gcr.io/$GOOGLE_PROJECT_ID/api-$CI_ENVIRONMENT_NAME:latest
    - docker push gcr.io/$GOOGLE_PROJECT_ID/webapp-$CI_ENVIRONMENT_NAME:${CI_COMMIT_SHORT_SHA}
    - docker push gcr.io/$GOOGLE_PROJECT_ID/webapp-$CI_ENVIRONMENT_NAME:latest

# Job for the dev branch
build_dev:
  extends: .build_template
  stage: build
  only:
    - dev
  variables:
    NEXT_PUBLIC_API_URL: "https://dev.talecompendiumcloud.com/api"
    NEXT_PUBLIC_WEBAPP_URL: "https://dev.talecompendiumcloud.com"
  environment:
    name: dev

# Job for the main branch
build_main:
  extends: .build_template
  stage: build
  only:
    - main
  variables:
    NEXT_PUBLIC_API_URL: "https://talecompendiumcloud.com/api"
    NEXT_PUBLIC_WEBAPP_URL: "https://talecompendiumcloud.com"
  environment:
    name: main

# Shared template for Terraform imports and apply
.deploy_template:
  script:
    - echo "Deploying to $CI_ENVIRONMENT_NAME environment"
    - cd terraform/$CI_ENVIRONMENT_NAME
    - terraform init -input=false
    - terraform import kubernetes_deployment.webapp default/webapp-deployment || echo "webapp-deployment does not exist, skipping import"
    - terraform import kubernetes_deployment.api default/api-deployment || echo "api-deployment does not exist, skipping import"
    - terraform import kubernetes_deployment.database default/database-deployment || echo "database-deployment does not exist, skipping import"
    - terraform import kubernetes_service.webapp default/webapp-service || echo "webapp-service does not exist, skipping import"
    - terraform import kubernetes_service.api default/api-service || echo "api-service does not exist, skipping import"
    - terraform import kubernetes_service.database default/database-service || echo "database-service does not exist, skipping import"
    - terraform import helm_release.cert_manager cert-manager/cert-manager || echo "cert-manager does not exist, skipping import"
    - terraform import helm_release.nginx_ingress ingress-nginx/nginx-ingress || echo "nginx-ingress does not exist, skipping import"
    - terraform apply -auto-approve -var environment=$CI_ENVIRONMENT_NAME || { 
        echo "Deployment failed, attempting to destroy resources..."; 
        terraform destroy -auto-approve -target='!kubernetes_deployment.database';
        exit 1; 
      }

# Deploy to dev environment
deploy_dev:
  extends: .deploy_template
  stage: deploy
  only:
    - dev
  environment:
    name: dev
    url: https://dev.talecompendiumcloud.com

# Deploy to main environment
deploy_main:
  extends: .deploy_template
  stage: deploy
  only:
    - main
  environment:
    name: main
    url: https://talecompendiumcloud.com

# Cleanup job for dev
cleanup_dev:
  stage: cleanup
  only:
    - dev
  script:
    - echo "Cleaning up old Docker images for dev"
    - gcloud container images list-tags gcr.io/$GOOGLE_PROJECT_ID/webapp-dev --format='get(digest)' --filter='NOT tags:(latest)' | while read digest; do
        gcloud container images delete gcr.io/$GOOGLE_PROJECT_ID/webapp-dev@$digest --quiet --force-delete-tags;
      done
    - gcloud container images list-tags gcr.io/$GOOGLE_PROJECT_ID/api-dev --format='get(digest)' --filter='NOT tags:(latest)' | while read digest; do
        gcloud container images delete gcr.io/$GOOGLE_PROJECT_ID/api-dev@$digest --quiet --force-delete-tags;
      done

# Cleanup job for main
cleanup_main:
  stage: cleanup
  only:
    - main
  script:
    - echo "Cleaning up old Docker images for main"
    - gcloud container images list-tags gcr.io/$GOOGLE_PROJECT_ID/webapp-main --format='get(digest)' --filter='NOT tags:(latest)' | while read digest; do
        gcloud container images delete gcr.io/$GOOGLE_PROJECT_ID/webapp-main@$digest --quiet --force-delete-tags;
      done
    - gcloud container images list-tags gcr.io/$GOOGLE_PROJECT_ID/api-main --format='get(digest)' --filter='NOT tags:(latest)' | while read digest; do
        gcloud container images delete gcr.io/$GOOGLE_PROJECT_ID/api-main@$digest --quiet --force-delete-tags;
      done
